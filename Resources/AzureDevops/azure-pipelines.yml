# Deploy to Azure Kubernetes Service
# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
  branches:
    include:
    - master

resources:
  - repo: self

variables:

  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: 'DockerConnectionGitHub'
  imageRepository: 'mon-devops-aks-agent'
  containerRegistry: 'mondevappsharedcr.azurecr.io'
  dockerfilePath: '**/DockerFiles/Dockerfile'
  tag: '$(Build.BuildNumber)'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'
  
  # Name of the new namespace being created to deploy the PR changes.
  k8sNamespaceForPR: '$(system.pullRequest.pullRequestId)'

stages:
- stage: Build
  displayName: Build stage
  jobs:  
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag) 
    - upload: manifests
      artifact: manifests

- stage: PullRequest
  displayName: PullRequest Stage
  dependsOn: Build
  condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/pull/'))

  jobs:

  - deployment: DeployPullRequest
    variables:
    - group: KeyVault - mon-dev-shared-kv
    - template: VariableTemplates\SharedEnvironmentVariables.yml
    - template: VariableTemplates\DevEnvironmentVariables.yml
    #dependsOn: Prepare
    displayName: Deploy Pull request
    condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/pull/'))
    pool:
      vmImage: vs2017-win2016    
    environment: 'AksCalculatorDemo.$(k8sNamespaceForPR)'
    strategy:
      runOnce:
        deploy:
          steps:
          - reviewApp: dev
          - task: Tokenization@2            
            displayName: 'Tokenization: transform file mon-devops-aks-agent.yml'
            inputs:
              SourcePath: $(Pipeline.Workspace)/manifests/
              TargetFileNames: mon-devops-aks-agent.yml            
          - task: Kubernetes@1
            displayName: 'Create a new namespace for the pull request'
            inputs:
              connectionType: 'Kubernetes Service Connection'
              kubernetesServiceEndpoint: 'AksCalculatorDemo'
              command: apply
              useConfigurationFile: true
              inline: '{ "kind": "Namespace", "apiVersion": "v1", "metadata": { "name": "$(k8sNamespaceForPR)" }}'          
          # Create PAT token secret
          - task: Kubernetes@1
            displayName: kubectl create pat token secret
            inputs:
              connectionType: 'Kubernetes Service Connection'
              kubernetesServiceEndpoint:  'AksCalculatorDemo'
              useClusterAdmin: true
              namespace: '$(k8sNamespaceForPR)'
              secretType: generic
              secretArguments: --from-literal=pattokensecret=$(AzurePatToken)
              secretName: mon-azuredevops-pat-token
              forceUpdate: true
          - task: KubernetesManifest@0
            displayName: Deploy to the new namespace n the Kubernetes cluster
            inputs:
              kubernetesServiceConnection: 'AksCalculatorDemo'
              action: deploy
              namespace: $(k8sNamespaceForPR)
              manifests: |
                $(Pipeline.Workspace)/manifests/mon-devops-aks-agent.yml
              containers: |
                $(containerRegistry)/$(imageRepository):$(tag)                    
          - task: DeleteFiles@1
            displayName: 'Delete tokenised file'
            inputs:
              SourceFolder: $(Pipeline.Workspace)/manifests/
              Contents:  mon-devops-aks-agent.yml
      
  - job: BashJob
    dependsOn: DeployPullRequest
    condition: succeeded()
    pool:
      name: 'MON - Docker'
    steps:
    - bash: 'ls -l /data'
      displayName: 'Bash Script: Run jMeter Test'
      workingDirectory: $(Agent.TempDirectory)
    - bash: 'rm -rf /data'
      displayName: 'Bash Script: Run jMeter Test'
      workingDirectory: $(Agent.TempDirectory)
    - bash: 'pwd'
      displayName: 'Bash Script: Run jMeter Test'
      workingDirectory: $(Agent.TempDirectory)
        
- stage: DeployDEVStage
  displayName: Deploy DEV stage
  dependsOn: Build
  condition: and(succeeded(), not(startsWith(variables['Build.SourceBranch'], 'refs/pull/')))
  jobs:
  - deployment: DeployDEVJob
    variables:
    - group: KeyVault - mon-dev-shared-kv
    - template: VariableTemplates\SharedEnvironmentVariables.yml
    - template: VariableTemplates\DevEnvironmentVariables.yml
    condition: and(succeeded(), not(startsWith(variables['Build.SourceBranch'], 'refs/pull/')))
    displayName: Deploy DEV Job
    pool:
      vmImage:  vs2017-win2016 
    environment: 'dev.dev'
    strategy:
      runOnce:
        deploy:
          steps:    
          # Create PAT token secret
          - task: Tokenization@2            
            displayName: 'Tokenization: transform file mon-devops-aks-agent.yml'
            inputs:
              SourcePath: $(Pipeline.Workspace)/manifests/
              TargetFileNames: mon-devops-aks-agent.yml
                            
          - task: Kubernetes@1
            displayName: kubectl create pat token secret
            inputs:
              useClusterAdmin: true
              namespace: 'dev'
              secretType: generic
              secretArguments: --from-literal=pattokensecret=$(AzurePatToken)
              secretName: mon-azuredevops-pat-token
              forceUpdate: true
          
          - task: KubernetesManifest@0
            displayName: Deploy to Kubernetes cluster
            inputs:
              action: deploy
              manifests: |
                $(Pipeline.Workspace)/manifests/mon-devops-aks-agent.yml
              containers: |
                $(containerRegistry)/$(imageRepository):$(tag)

          - task: DeleteFiles@1
            displayName: 'Delete tokenised file'
            inputs:
              SourceFolder: $(Pipeline.Workspace)/manifests/
              Contents: mon-devops-aks-agent.yml

  - job: BashJob
    dependsOn: DeployDEVJob
    condition: succeeded()
    pool:
      name: 'my-new-pool'
    steps:
    - bash: 'ls -l /data'
      displayName: 'Bash Script: Run jMeter Test'
      workingDirectory: $(Agent.TempDirectory)
    - bash: 'rm -rf /data'
      displayName: 'Bash Script: Run jMeter Test'
      workingDirectory: $(Agent.TempDirectory)
    - bash: 'pwd'
      displayName: 'Bash Script: Run jMeter Test'
      workingDirectory: $(Agent.TempDirectory)